import os
import os.path
import shutil
from distutils import dir_util

import Globals

class Builder():

  def start(self):    
    # Figure out GCC version
    pieces = Globals.compiler_version_.split('.')
    if len(pieces) != 3:
      return Globals.PrintError('Boost could not parse GCC Version properly: ' + Globals.compiler_version_)
    
    gcc_version = str(pieces[0]) + str(pieces[1])
    print('-- GCC Version for Boost: ' + gcc_version)
    
    boostFileName = Globals.boost_source_directory_ + '/' + Globals.boost_version
  
    # Decompress our boost archive
    if not os.path.exists('temp.tar') and not os.path.exists('temp.tar.gz'):
      print '-- Copying Boost archive'
      os.system('cp ' + boostFileName + '.tar.gz temp.tar.gz')
    
    # Decompress our boost archive
    print '-- Decompressing Boost'
    if os.path.exists('temp.tar.gz'):
      os.system('gzip -d temp.tar.gz')
    
    if os.path.exists('temp.tar'):
      os.system('tar -x -ftemp.tar')
      os.system('rm -rf temp.tar')

    else:
        return Globals.PrintError('Unable to Decompress ' + boostFileName + '_windows.zip')
    
    # Build Boost
    print('-- Building Boost - check spm_build.log for progress')
    folder = Globals.boost_directory_ + '/' + Globals.boost_version + '/'
    print('-- Folder: ' + folder)
    os.chdir(folder)
    os.system('./bootstrap.sh gcc 1> spm_bootstrap.log 2>&1')
    os.system("./b2 address-model=64 architecture=x86 --toolset=gcc link=static threading=multi -j " + Globals.threads_ + " cxxflags='-fPIC' 1> spm_build.log 2>&1")
    print('-- Completed Boost')
    
    return True



    return True

                
      # Move our headers and libraries
      print '-- Moving headers and libraries'
      dir_util.copy_tree('boost', Globals.target_include_path_ + '/boost/')
      for library in libraries:
        shutil.copy('stage/lib/' + library, Globals.target_debug_lib_path_)
        shutil.copy('stage/lib/' + library, Globals.target_release_lib_path_)
      
      return True
